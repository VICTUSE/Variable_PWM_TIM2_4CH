
TIM_OC_PWM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e70  08002e70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e70  08002e70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e70  08002e70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002e84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002e84  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c13e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001972  00000000  00000000  0002c1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000907  00000000  00000000  0002e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197fa  00000000  00000000  0002ef97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbd4  00000000  00000000  00048791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097e97  00000000  00000000  00056365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002924  00000000  00000000  000ee1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f0b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e20 	.word	0x08002e20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e20 	.word	0x08002e20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	uint32_t brightness=1;
 8000226:	2301      	movs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fb33 	bl	8000894 <HAL_Init>



  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f84b 	bl	80002c8 <SystemClock_Config>



  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f969 	bl	8000508 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000236:	f000 f8a9 	bl	800038c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f935 	bl	80004a8 <MX_USART2_UART_Init>

  /*
   * Start Tımer PWM with API
   */
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 800023e:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <main+0xa4>)
 8000240:	2100      	movs	r1, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fc62 	bl	8001b0c <HAL_TIM_PWM_Start>
 8000248:	1e03      	subs	r3, r0, #0
 800024a:	d001      	beq.n	8000250 <main+0x30>
  {
	  Error_Handler();
 800024c:	f000 f9c6 	bl	80005dc <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8000250:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <main+0xa4>)
 8000252:	2104      	movs	r1, #4
 8000254:	0018      	movs	r0, r3
 8000256:	f001 fc59 	bl	8001b0c <HAL_TIM_PWM_Start>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d001      	beq.n	8000262 <main+0x42>
  {
  	  Error_Handler();
 800025e:	f000 f9bd 	bl	80005dc <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK)
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0xa4>)
 8000264:	2108      	movs	r1, #8
 8000266:	0018      	movs	r0, r3
 8000268:	f001 fc50 	bl	8001b0c <HAL_TIM_PWM_Start>
 800026c:	1e03      	subs	r3, r0, #0
 800026e:	d001      	beq.n	8000274 <main+0x54>
  {
  	  Error_Handler();
 8000270:	f000 f9b4 	bl	80005dc <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0xa4>)
 8000276:	210c      	movs	r1, #12
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fc47 	bl	8001b0c <HAL_TIM_PWM_Start>
 800027e:	1e03      	subs	r3, r0, #0
 8000280:	d00c      	beq.n	800029c <main+0x7c>
  {
  	  Error_Handler();
 8000282:	f000 f9ab 	bl	80005dc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while(brightness < htim2.Init.Period)
 8000286:	e009      	b.n	800029c <main+0x7c>
	  {
		  brightness+=20;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3314      	adds	r3, #20
 800028c:	607b      	str	r3, [r7, #4]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, brightness);
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0xa4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fb60 	bl	800095c <HAL_Delay>
	  while(brightness < htim2.Init.Period)
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0xa4>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f0      	bcc.n	8000288 <main+0x68>
	  }
	  while(brightness > 1)
 80002a6:	e009      	b.n	80002bc <main+0x9c>
	  {
		  brightness-=20;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3b14      	subs	r3, #20
 80002ac:	607b      	str	r3, [r7, #4]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, brightness);
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <main+0xa4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(1);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fb50 	bl	800095c <HAL_Delay>
	  while(brightness > 1)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d8f2      	bhi.n	80002a8 <main+0x88>
	  while(brightness < htim2.Init.Period)
 80002c2:	e7eb      	b.n	800029c <main+0x7c>
 80002c4:	20000028 	.word	0x20000028

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b099      	sub	sp, #100	; 0x64
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	242c      	movs	r4, #44	; 0x2c
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2334      	movs	r3, #52	; 0x34
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f002 fd75 	bl	8002dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	231c      	movs	r3, #28
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0018      	movs	r0, r3
 80002e4:	2310      	movs	r3, #16
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f002 fd6d 	bl	8002dc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	231c      	movs	r3, #28
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f002 fd66 	bl	8002dc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2202      	movs	r2, #2
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2202      	movs	r2, #2
 8000314:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	0212      	lsls	r2, r2, #8
 800031c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	22a0      	movs	r2, #160	; 0xa0
 8000322:	0392      	lsls	r2, r2, #14
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2201      	movs	r2, #1
 800032a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	187b      	adds	r3, r7, r1
 800032e:	0018      	movs	r0, r3
 8000330:	f000 fdac 	bl	8000e8c <HAL_RCC_OscConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000338:	f000 f950 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	211c      	movs	r1, #28
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2202      	movs	r2, #2
 8000348:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2101      	movs	r1, #1
 800035a:	0018      	movs	r0, r3
 800035c:	f001 f91c 	bl	8001598 <HAL_RCC_ClockConfig>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000364:	f000 f93a 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000368:	003b      	movs	r3, r7
 800036a:	2202      	movs	r2, #2
 800036c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800036e:	003b      	movs	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000374:	003b      	movs	r3, r7
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fa7a 	bl	8001870 <HAL_RCCEx_PeriphCLKConfig>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000380:	f000 f92c 	bl	80005dc <Error_Handler>
  }
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b019      	add	sp, #100	; 0x64
 800038a:	bd90      	pop	{r4, r7, pc}

0800038c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0


  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	231c      	movs	r3, #28
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f002 fd14 	bl	8002dc8 <memset>


  htim2.Instance = TIM2;
 80003a0:	4b3f      	ldr	r3, [pc, #252]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	05d2      	lsls	r2, r2, #23
 80003a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ae:	4b3c      	ldr	r3, [pc, #240]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;                                    //ARR
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003b6:	4a3b      	ldr	r2, [pc, #236]	; (80004a4 <MX_TIM2_Init+0x118>)
 80003b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ba:	4b39      	ldr	r3, [pc, #228]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003c6:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f001 fb4f 	bl	8001a6c <HAL_TIM_PWM_Init>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 f903 	bl	80005dc <Error_Handler>
  }

 // memset(&sConfigOC,0,sizeof(sConfigOC));

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2260      	movs	r2, #96	; 0x60
 80003da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = (htim2.Init.Period * 10)/100;
 80003dc:	4b30      	ldr	r3, [pc, #192]	; (80004a0 <MX_TIM2_Init+0x114>)
 80003de:	68da      	ldr	r2, [r3, #12]
 80003e0:	0013      	movs	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	189b      	adds	r3, r3, r2
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	2164      	movs	r1, #100	; 0x64
 80003ea:	0018      	movs	r0, r3
 80003ec:	f7ff fe8c 	bl	8000108 <__udivsi3>
 80003f0:	0003      	movs	r3, r0
 80003f2:	001a      	movs	r2, r3
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000404:	1d39      	adds	r1, r7, #4
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000408:	2200      	movs	r2, #0
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fd24 	bl	8001e58 <HAL_TIM_PWM_ConfigChannel>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000414:	f000 f8e2 	bl	80005dc <Error_Handler>
  }
  //%45 duty ratio
  sConfigOC.Pulse = 0;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041e:	1d39      	adds	r1, r7, #4
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000422:	2204      	movs	r2, #4
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fd17 	bl	8001e58 <HAL_TIM_PWM_ConfigChannel>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM2_Init+0xa6>
  {
	Error_Handler();
 800042e:	f000 f8d5 	bl	80005dc <Error_Handler>
  }

  //%75 duty ratio
  sConfigOC.Pulse = (htim2.Init.Period * 75) / 100;
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000434:	68da      	ldr	r2, [r3, #12]
 8000436:	0013      	movs	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	189b      	adds	r3, r3, r2
 800043c:	011a      	lsls	r2, r3, #4
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	2164      	movs	r1, #100	; 0x64
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff fe60 	bl	8000108 <__udivsi3>
 8000448:	0003      	movs	r3, r0
 800044a:	001a      	movs	r2, r3
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000450:	1d39      	adds	r1, r7, #4
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000454:	2208      	movs	r2, #8
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fcfe 	bl	8001e58 <HAL_TIM_PWM_ConfigChannel>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0xd8>
  {
	Error_Handler();
 8000460:	f000 f8bc 	bl	80005dc <Error_Handler>
  }
  //%90 duty ratio
  sConfigOC.Pulse = (htim2.Init.Period * 90) / 100;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	225a      	movs	r2, #90	; 0x5a
 800046a:	4353      	muls	r3, r2
 800046c:	2164      	movs	r1, #100	; 0x64
 800046e:	0018      	movs	r0, r3
 8000470:	f7ff fe4a 	bl	8000108 <__udivsi3>
 8000474:	0003      	movs	r3, r0
 8000476:	001a      	movs	r2, r3
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800047c:	1d39      	adds	r1, r7, #4
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000480:	220c      	movs	r2, #12
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fce8 	bl	8001e58 <HAL_TIM_PWM_ConfigChannel>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x104>
  {
  	Error_Handler();
 800048c:	f000 f8a6 	bl	80005dc <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <MX_TIM2_Init+0x114>)
 8000492:	0018      	movs	r0, r3
 8000494:	f000 f8f0 	bl	8000678 <HAL_TIM_MspPostInit>

}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b008      	add	sp, #32
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000028 	.word	0x20000028
 80004a4:	0000270f 	.word	0x0000270f

080004a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <MX_USART2_UART_Init+0x5c>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004b4:	2296      	movs	r2, #150	; 0x96
 80004b6:	0212      	lsls	r2, r2, #8
 80004b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 f85f 	bl	80025b0 <HAL_UART_Init>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004f6:	f000 f871 	bl	80005dc <Error_Handler>
  }


}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000070 	.word	0x20000070
 8000504:	40004400 	.word	0x40004400

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	240c      	movs	r4, #12
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 fc55 	bl	8002dc8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0309      	lsls	r1, r1, #12
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	031b      	lsls	r3, r3, #12
 8000534:	4013      	ands	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	03c9      	lsls	r1, r1, #15
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	03db      	lsls	r3, r3, #15
 8000550:	4013      	ands	r3, r2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	4013      	ands	r3, r2
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2390      	movs	r3, #144	; 0x90
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fc68 	bl	8000e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0192      	lsls	r2, r2, #6
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2284      	movs	r2, #132	; 0x84
 800058c:	0392      	lsls	r2, r2, #14
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000596:	193b      	adds	r3, r7, r4
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <MX_GPIO_Init+0xd0>)
 800059a:	0019      	movs	r1, r3
 800059c:	0010      	movs	r0, r2
 800059e:	f000 fadf 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a2:	0021      	movs	r1, r4
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2220      	movs	r2, #32
 80005a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2201      	movs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	187a      	adds	r2, r7, r1
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 facb 	bl	8000b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b009      	add	sp, #36	; 0x24
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000800 	.word	0x48000800

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x44>)
 80005f0:	699a      	ldr	r2, [r3, #24]
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_MspInit+0x44>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	430a      	orrs	r2, r1
 80005f8:	619a      	str	r2, [r3, #24]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	2201      	movs	r2, #1
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_MspInit+0x44>)
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_MspInit+0x44>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0549      	lsls	r1, r1, #21
 8000610:	430a      	orrs	r2, r1
 8000612:	61da      	str	r2, [r3, #28]
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_MspInit+0x44>)
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	055b      	lsls	r3, r3, #21
 800061c:	4013      	ands	r3, r2
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	429a      	cmp	r2, r3
 8000642:	d113      	bne.n	800066c <HAL_TIM_PWM_MspInit+0x3c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_TIM_PWM_MspInit+0x44>)
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_TIM_PWM_MspInit+0x44>)
 800064a:	2101      	movs	r1, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	61da      	str	r2, [r3, #28]
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_PWM_MspInit+0x44>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	2201      	movs	r2, #1
 8000656:	4013      	ands	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	200f      	movs	r0, #15
 8000662:	f000 fa4b 	bl	8000afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000666:	200f      	movs	r0, #15
 8000668:	f000 fa5d 	bl	8000b26 <HAL_NVIC_EnableIRQ>

  }

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b004      	add	sp, #16
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	; 0x2c
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	2414      	movs	r4, #20
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	2314      	movs	r3, #20
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f002 fb9c 	bl	8002dc8 <memset>
  if(htim->Instance==TIM2)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	429a      	cmp	r2, r3
 800069a:	d152      	bne.n	8000742 <HAL_TIM_MspPostInit+0xca>
  {


    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <HAL_TIM_MspPostInit+0xd4>)
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <HAL_TIM_MspPostInit+0xd4>)
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0289      	lsls	r1, r1, #10
 80006a6:	430a      	orrs	r2, r1
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <HAL_TIM_MspPostInit+0xd4>)
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	029b      	lsls	r3, r3, #10
 80006b2:	4013      	ands	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <HAL_TIM_MspPostInit+0xd4>)
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <HAL_TIM_MspPostInit+0xd4>)
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	02c9      	lsls	r1, r1, #11
 80006c2:	430a      	orrs	r2, r1
 80006c4:	615a      	str	r2, [r3, #20]
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <HAL_TIM_MspPostInit+0xd4>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	02db      	lsls	r3, r3, #11
 80006ce:	4013      	ands	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2202      	movs	r2, #2
 80006de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2202      	movs	r2, #2
 80006f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	193a      	adds	r2, r7, r4
 80006f4:	2390      	movs	r3, #144	; 0x90
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fa30 	bl	8000b60 <HAL_GPIO_Init>
    /*PA1     ------> TIM2_CH2
        */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2202      	movs	r2, #2
 8000704:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	193a      	adds	r2, r7, r4
 8000708:	2390      	movs	r3, #144	; 0x90
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fa26 	bl	8000b60 <HAL_GPIO_Init>
    /*PB10     ------> TIM2_CH3
            */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000714:	0021      	movs	r1, r4
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	00d2      	lsls	r2, r2, #3
 800071c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	000c      	movs	r4, r1
 8000720:	187b      	adds	r3, r7, r1
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <HAL_TIM_MspPostInit+0xd8>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f000 fa1a 	bl	8000b60 <HAL_GPIO_Init>
    /*PB11     ------> TIM2_CH4
                */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800072c:	0021      	movs	r1, r4
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	187b      	adds	r3, r7, r1
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <HAL_TIM_MspPostInit+0xd8>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f000 fa0f 	bl	8000b60 <HAL_GPIO_Init>
  }

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00b      	add	sp, #44	; 0x2c
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000
 8000750:	48000400 	.word	0x48000400

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b08b      	sub	sp, #44	; 0x2c
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	2414      	movs	r4, #20
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 fb2e 	bl	8002dc8 <memset>
  if(huart->Instance==USART2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d132      	bne.n	80007dc <HAL_UART_MspInit+0x88>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <HAL_UART_MspInit+0x94>)
 8000778:	69da      	ldr	r2, [r3, #28]
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <HAL_UART_MspInit+0x94>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <HAL_UART_MspInit+0x94>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_UART_MspInit+0x94>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_UART_MspInit+0x94>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0289      	lsls	r1, r1, #10
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007a2:	695a      	ldr	r2, [r3, #20]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	029b      	lsls	r3, r3, #10
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	220c      	movs	r2, #12
 80007b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	2390      	movs	r3, #144	; 0x90
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f9c2 	bl	8000b60 <HAL_GPIO_Init>


  }

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b00b      	add	sp, #44	; 0x2c
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40021000 	.word	0x40021000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f888 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim2);
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <TIM2_IRQHandler+0x14>)
 8000822:	0018      	movs	r0, r3
 8000824:	f001 fa2a 	bl	8001c7c <HAL_TIM_IRQHandler>

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000028 	.word	0x20000028

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff fff6 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f002 fab3 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fcd5 	bl	8000220 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000884:	08002e78 	.word	0x08002e78
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800088c:	200000fc 	.word	0x200000fc

08000890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_COMP_IRQHandler>
	...

08000894 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_Init+0x24>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_Init+0x24>)
 800089e:	2110      	movs	r1, #16
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f809 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008aa:	f7ff fe9d 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_InitTick+0x5c>)
 80008c6:	681c      	ldr	r4, [r3, #0]
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_InitTick+0x60>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	0019      	movs	r1, r3
 80008ce:	23fa      	movs	r3, #250	; 0xfa
 80008d0:	0098      	lsls	r0, r3, #2
 80008d2:	f7ff fc19 	bl	8000108 <__udivsi3>
 80008d6:	0003      	movs	r3, r0
 80008d8:	0019      	movs	r1, r3
 80008da:	0020      	movs	r0, r4
 80008dc:	f7ff fc14 	bl	8000108 <__udivsi3>
 80008e0:	0003      	movs	r3, r0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f92f 	bl	8000b46 <HAL_SYSTICK_Config>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e00f      	b.n	8000910 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d80b      	bhi.n	800090e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f8fc 	bl	8000afc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_InitTick+0x64>)
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b003      	add	sp, #12
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x1c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	001a      	movs	r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x20>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	18d2      	adds	r2, r2, r3
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_IncTick+0x20>)
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000008 	.word	0x20000008
 8000944:	200000f8 	.word	0x200000f8

08000948 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <HAL_GetTick+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	200000f8 	.word	0x200000f8

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fff0 	bl	8000948 <HAL_GetTick>
 8000968:	0003      	movs	r3, r0
 800096a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	001a      	movs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	189b      	adds	r3, r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	f7ff ffe0 	bl	8000948 <HAL_GetTick>
 8000988:	0002      	movs	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b004      	add	sp, #16
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b7f      	cmp	r3, #127	; 0x7f
 80009b6:	d809      	bhi.n	80009cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	231f      	movs	r3, #31
 80009c0:	401a      	ands	r2, r3
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_EnableIRQ+0x30>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	4091      	lsls	r1, r2
 80009c8:	000a      	movs	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
  }
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	0002      	movs	r2, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b7f      	cmp	r3, #127	; 0x7f
 80009ec:	d828      	bhi.n	8000a40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ee:	4a2f      	ldr	r2, [pc, #188]	; (8000aac <__NVIC_SetPriority+0xd4>)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	33c0      	adds	r3, #192	; 0xc0
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	589b      	ldr	r3, [r3, r2]
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	0011      	movs	r1, r2
 8000a04:	2203      	movs	r2, #3
 8000a06:	400a      	ands	r2, r1
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	21ff      	movs	r1, #255	; 0xff
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	43d2      	mvns	r2, r2
 8000a12:	401a      	ands	r2, r3
 8000a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	4003      	ands	r3, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	481f      	ldr	r0, [pc, #124]	; (8000aac <__NVIC_SetPriority+0xd4>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	33c0      	adds	r3, #192	; 0xc0
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a3e:	e031      	b.n	8000aa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <__NVIC_SetPriority+0xd8>)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0019      	movs	r1, r3
 8000a48:	230f      	movs	r3, #15
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	3b08      	subs	r3, #8
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3306      	adds	r3, #6
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	3304      	adds	r3, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	2203      	movs	r2, #3
 8000a62:	400a      	ands	r2, r1
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	21ff      	movs	r1, #255	; 0xff
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	401a      	ands	r2, r3
 8000a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	401a      	ands	r2, r3
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2303      	movs	r3, #3
 8000a82:	4003      	ands	r3, r0
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <__NVIC_SetPriority+0xd8>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	001c      	movs	r4, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	4023      	ands	r3, r4
 8000a94:	3b08      	subs	r3, #8
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	3306      	adds	r3, #6
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	18c3      	adds	r3, r0, r3
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b003      	add	sp, #12
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	045b      	lsls	r3, r3, #17
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d301      	bcc.n	8000acc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e010      	b.n	8000aee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <SysTick_Config+0x44>)
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	3a01      	subs	r2, #1
 8000ad2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2103      	movs	r1, #3
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ff7c 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x44>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x44>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	210f      	movs	r1, #15
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	1c02      	adds	r2, r0, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b004      	add	sp, #16
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff33 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ffaf 	bl	8000ab4 <SysTick_Config>
 8000b56:	0003      	movs	r3, r0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e155      	b.n	8000e1c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <HAL_GPIO_Init+0x28>
 8000b86:	e146      	b.n	8000e16 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	409a      	lsls	r2, r3
 8000bae:	0013      	movs	r3, r2
 8000bb0:	43da      	mvns	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	2201      	movs	r2, #1
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2203      	movs	r2, #3
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d017      	beq.n	8000c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2203      	movs	r2, #3
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d123      	bne.n	8000c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	58d3      	ldr	r3, [r2, r3]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2107      	movs	r1, #7
 8000c76:	400b      	ands	r3, r1
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	0092      	lsls	r2, r2, #2
 8000c8e:	6939      	ldr	r1, [r7, #16]
 8000c90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	23c0      	movs	r3, #192	; 0xc0
 8000ccc:	029b      	lsls	r3, r3, #10
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d100      	bne.n	8000cd4 <HAL_GPIO_Init+0x174>
 8000cd2:	e0a0      	b.n	8000e16 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	4b57      	ldr	r3, [pc, #348]	; (8000e34 <HAL_GPIO_Init+0x2d4>)
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <HAL_GPIO_Init+0x2d4>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	4b54      	ldr	r3, [pc, #336]	; (8000e34 <HAL_GPIO_Init+0x2d4>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	589b      	ldr	r3, [r3, r2]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	2390      	movs	r3, #144	; 0x90
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d019      	beq.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a47      	ldr	r2, [pc, #284]	; (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x1ea>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a46      	ldr	r2, [pc, #280]	; (8000e40 <HAL_GPIO_Init+0x2e0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x1e6>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a45      	ldr	r2, [pc, #276]	; (8000e44 <HAL_GPIO_Init+0x2e4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x1e2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a44      	ldr	r2, [pc, #272]	; (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x1de>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e008      	b.n	8000d50 <HAL_GPIO_Init+0x1f0>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x1f0>
 8000d42:	2303      	movs	r3, #3
 8000d44:	e004      	b.n	8000d50 <HAL_GPIO_Init+0x1f0>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x1f0>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x1f0>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	2103      	movs	r1, #3
 8000d54:	400a      	ands	r2, r1
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d60:	4935      	ldr	r1, [pc, #212]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	035b      	lsls	r3, r3, #13
 8000d86:	4013      	ands	r3, r2
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d98:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43da      	mvns	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	039b      	lsls	r3, r3, #14
 8000db0:	4013      	ands	r3, r2
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	029b      	lsls	r3, r3, #10
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	4013      	ands	r3, r2
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1e13      	subs	r3, r2, #0
 8000e26:	d000      	beq.n	8000e2a <HAL_GPIO_Init+0x2ca>
 8000e28:	e6a2      	b.n	8000b70 <HAL_GPIO_Init+0x10>
  } 
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800
 8000e44:	48000c00 	.word	0x48000c00
 8000e48:	48001000 	.word	0x48001000
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	0008      	movs	r0, r1
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	1cbb      	adds	r3, r7, #2
 8000e5e:	1c02      	adds	r2, r0, #0
 8000e60:	801a      	strh	r2, [r3, #0]
 8000e62:	1c7b      	adds	r3, r7, #1
 8000e64:	1c0a      	adds	r2, r1, #0
 8000e66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e68:	1c7b      	adds	r3, r7, #1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e70:	1cbb      	adds	r3, r7, #2
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e78:	e003      	b.n	8000e82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7a:	1cbb      	adds	r3, r7, #2
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f000 fb76 	bl	800158c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d100      	bne.n	8000eac <HAL_RCC_OscConfig+0x20>
 8000eaa:	e08e      	b.n	8000fca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eac:	4bc5      	ldr	r3, [pc, #788]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00e      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4bc2      	ldr	r3, [pc, #776]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	220c      	movs	r2, #12
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d117      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x68>
 8000ec4:	4bbf      	ldr	r3, [pc, #764]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	23c0      	movs	r3, #192	; 0xc0
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	401a      	ands	r2, r3
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	025b      	lsls	r3, r3, #9
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed6:	4bbb      	ldr	r3, [pc, #748]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	029b      	lsls	r3, r3, #10
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x58>
 8000ee2:	e071      	b.n	8000fc8 <HAL_RCC_OscConfig+0x13c>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d000      	beq.n	8000eee <HAL_RCC_OscConfig+0x62>
 8000eec:	e06c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f000 fb4c 	bl	800158c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d107      	bne.n	8000f0c <HAL_RCC_OscConfig+0x80>
 8000efc:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4bb0      	ldr	r3, [pc, #704]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e02f      	b.n	8000f6c <HAL_RCC_OscConfig+0xe0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0xa2>
 8000f14:	4bab      	ldr	r3, [pc, #684]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4baa      	ldr	r3, [pc, #680]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f1a:	49ab      	ldr	r1, [pc, #684]	; (80011c8 <HAL_RCC_OscConfig+0x33c>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	4ba8      	ldr	r3, [pc, #672]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4ba7      	ldr	r3, [pc, #668]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f26:	49a9      	ldr	r1, [pc, #676]	; (80011cc <HAL_RCC_OscConfig+0x340>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e01e      	b.n	8000f6c <HAL_RCC_OscConfig+0xe0>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d10e      	bne.n	8000f54 <HAL_RCC_OscConfig+0xc8>
 8000f36:	4ba3      	ldr	r3, [pc, #652]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4ba2      	ldr	r3, [pc, #648]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	02c9      	lsls	r1, r1, #11
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	4b9f      	ldr	r3, [pc, #636]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b9e      	ldr	r3, [pc, #632]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xe0>
 8000f54:	4b9b      	ldr	r3, [pc, #620]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b9a      	ldr	r3, [pc, #616]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	499b      	ldr	r1, [pc, #620]	; (80011c8 <HAL_RCC_OscConfig+0x33c>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	4b98      	ldr	r3, [pc, #608]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b97      	ldr	r3, [pc, #604]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f66:	4999      	ldr	r1, [pc, #612]	; (80011cc <HAL_RCC_OscConfig+0x340>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d014      	beq.n	8000f9e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fce8 	bl	8000948 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fce3 	bl	8000948 <HAL_GetTick>
 8000f82:	0002      	movs	r2, r0
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e2fd      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f90:	4b8c      	ldr	r3, [pc, #560]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0xf2>
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fcd3 	bl	8000948 <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fcce 	bl	8000948 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e2e8      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	4b82      	ldr	r3, [pc, #520]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	029b      	lsls	r3, r3, #10
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x11c>
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x14a>
 8000fd4:	e06c      	b.n	80010b0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	220c      	movs	r2, #12
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d00e      	beq.n	8000ffe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe0:	4b78      	ldr	r3, [pc, #480]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d11f      	bne.n	800102c <HAL_RCC_OscConfig+0x1a0>
 8000fec:	4b75      	ldr	r3, [pc, #468]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	23c0      	movs	r3, #192	; 0xc0
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2202      	movs	r2, #2
 8001004:	4013      	ands	r3, r2
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x188>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d001      	beq.n	8001014 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e2bb      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	22f8      	movs	r2, #248	; 0xf8
 800101a:	4393      	bics	r3, r2
 800101c:	0019      	movs	r1, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	00da      	lsls	r2, r3, #3
 8001024:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001026:	430a      	orrs	r2, r1
 8001028:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e041      	b.n	80010b0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d024      	beq.n	800107e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc82 	bl	8000948 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fc7d 	bl	8000948 <HAL_GetTick>
 800104e:	0002      	movs	r2, r0
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e297      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2202      	movs	r2, #2
 8001062:	4013      	ands	r3, r2
 8001064:	d0f1      	beq.n	800104a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001066:	4b57      	ldr	r3, [pc, #348]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	22f8      	movs	r2, #248	; 0xf8
 800106c:	4393      	bics	r3, r2
 800106e:	0019      	movs	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	00da      	lsls	r2, r3, #3
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e018      	b.n	80010b0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107e:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001084:	2101      	movs	r1, #1
 8001086:	438a      	bics	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108a:	f7ff fc5d 	bl	8000948 <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fc58 	bl	8000948 <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e272      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2202      	movs	r2, #2
 80010ac:	4013      	ands	r3, r2
 80010ae:	d1f1      	bne.n	8001094 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2208      	movs	r2, #8
 80010b6:	4013      	ands	r3, r2
 80010b8:	d036      	beq.n	8001128 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d019      	beq.n	80010f6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80010c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fc3b 	bl	8000948 <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc36 	bl	8000948 <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e250      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f1      	beq.n	80010d8 <HAL_RCC_OscConfig+0x24c>
 80010f4:	e018      	b.n	8001128 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80010f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	438a      	bics	r2, r1
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fc21 	bl	8000948 <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fc1c 	bl	8000948 <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e236      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d1f1      	bne.n	800110c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2204      	movs	r2, #4
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_RCC_OscConfig+0x2a8>
 8001132:	e0b5      	b.n	80012a0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001134:	201f      	movs	r0, #31
 8001136:	183b      	adds	r3, r7, r0
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 800113e:	69da      	ldr	r2, [r3, #28]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	055b      	lsls	r3, r3, #21
 8001144:	4013      	ands	r3, r2
 8001146:	d110      	bne.n	800116a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0549      	lsls	r1, r1, #21
 8001152:	430a      	orrs	r2, r1
 8001154:	61da      	str	r2, [r3, #28]
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	055b      	lsls	r3, r3, #21
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001164:	183b      	adds	r3, r7, r0
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_RCC_OscConfig+0x344>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4013      	ands	r3, r2
 8001174:	d11a      	bne.n	80011ac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_RCC_OscConfig+0x344>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_RCC_OscConfig+0x344>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0049      	lsls	r1, r1, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001184:	f7ff fbe0 	bl	8000948 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118e:	f7ff fbdb 	bl	8000948 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b64      	cmp	r3, #100	; 0x64
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1f5      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x344>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d10f      	bne.n	80011d4 <HAL_RCC_OscConfig+0x348>
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_RCC_OscConfig+0x338>)
 80011ba:	2101      	movs	r1, #1
 80011bc:	430a      	orrs	r2, r1
 80011be:	621a      	str	r2, [r3, #32]
 80011c0:	e036      	b.n	8001230 <HAL_RCC_OscConfig+0x3a4>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000
 80011c8:	fffeffff 	.word	0xfffeffff
 80011cc:	fffbffff 	.word	0xfffbffff
 80011d0:	40007000 	.word	0x40007000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10c      	bne.n	80011f6 <HAL_RCC_OscConfig+0x36a>
 80011dc:	4bca      	ldr	r3, [pc, #808]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	4bc9      	ldr	r3, [pc, #804]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	438a      	bics	r2, r1
 80011e6:	621a      	str	r2, [r3, #32]
 80011e8:	4bc7      	ldr	r3, [pc, #796]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4bc6      	ldr	r3, [pc, #792]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	2104      	movs	r1, #4
 80011f0:	438a      	bics	r2, r1
 80011f2:	621a      	str	r2, [r3, #32]
 80011f4:	e01c      	b.n	8001230 <HAL_RCC_OscConfig+0x3a4>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x38c>
 80011fe:	4bc2      	ldr	r3, [pc, #776]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001200:	6a1a      	ldr	r2, [r3, #32]
 8001202:	4bc1      	ldr	r3, [pc, #772]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001204:	2104      	movs	r1, #4
 8001206:	430a      	orrs	r2, r1
 8001208:	621a      	str	r2, [r3, #32]
 800120a:	4bbf      	ldr	r3, [pc, #764]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4bbe      	ldr	r3, [pc, #760]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	621a      	str	r2, [r3, #32]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0x3a4>
 8001218:	4bbb      	ldr	r3, [pc, #748]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800121a:	6a1a      	ldr	r2, [r3, #32]
 800121c:	4bba      	ldr	r3, [pc, #744]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800121e:	2101      	movs	r1, #1
 8001220:	438a      	bics	r2, r1
 8001222:	621a      	str	r2, [r3, #32]
 8001224:	4bb8      	ldr	r3, [pc, #736]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	4bb7      	ldr	r3, [pc, #732]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800122a:	2104      	movs	r1, #4
 800122c:	438a      	bics	r2, r1
 800122e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d014      	beq.n	8001262 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fb86 	bl	8000948 <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	e009      	b.n	8001256 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fb81 	bl	8000948 <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	4aaf      	ldr	r2, [pc, #700]	; (800150c <HAL_RCC_OscConfig+0x680>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e19a      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001256:	4bac      	ldr	r3, [pc, #688]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x3b6>
 8001260:	e013      	b.n	800128a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb71 	bl	8000948 <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	e009      	b.n	8001280 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126c:	f7ff fb6c 	bl	8000948 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	4aa5      	ldr	r2, [pc, #660]	; (800150c <HAL_RCC_OscConfig+0x680>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e185      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001280:	4ba1      	ldr	r3, [pc, #644]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	2202      	movs	r2, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800128a:	231f      	movs	r3, #31
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001294:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001296:	69da      	ldr	r2, [r3, #28]
 8001298:	4b9b      	ldr	r3, [pc, #620]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800129a:	499d      	ldr	r1, [pc, #628]	; (8001510 <HAL_RCC_OscConfig+0x684>)
 800129c:	400a      	ands	r2, r1
 800129e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2210      	movs	r2, #16
 80012a6:	4013      	ands	r3, r2
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d12a      	bne.n	8001308 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	2104      	movs	r1, #4
 80012ba:	430a      	orrs	r2, r1
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012be:	4b92      	ldr	r3, [pc, #584]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fb3d 	bl	8000948 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012d4:	f7ff fb38 	bl	8000948 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e152      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f1      	beq.n	80012d4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012f0:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	22f8      	movs	r2, #248	; 0xf8
 80012f6:	4393      	bics	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	00da      	lsls	r2, r3, #3
 8001300:	4b81      	ldr	r3, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
 8001306:	e034      	b.n	8001372 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	3305      	adds	r3, #5
 800130e:	d111      	bne.n	8001334 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001310:	4b7d      	ldr	r3, [pc, #500]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001314:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001316:	2104      	movs	r1, #4
 8001318:	438a      	bics	r2, r1
 800131a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800131c:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	22f8      	movs	r2, #248	; 0xf8
 8001322:	4393      	bics	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	00da      	lsls	r2, r3, #3
 800132c:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800132e:	430a      	orrs	r2, r1
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
 8001332:	e01e      	b.n	8001372 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001334:	4b74      	ldr	r3, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001338:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800133a:	2104      	movs	r1, #4
 800133c:	430a      	orrs	r2, r1
 800133e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001340:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001344:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fafc 	bl	8000948 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001356:	f7ff faf7 	bl	8000948 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e111      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	2202      	movs	r2, #2
 800136e:	4013      	ands	r3, r2
 8001370:	d1f1      	bne.n	8001356 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2220      	movs	r2, #32
 8001378:	4013      	ands	r3, r2
 800137a:	d05c      	beq.n	8001436 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800137c:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	220c      	movs	r2, #12
 8001382:	4013      	ands	r3, r2
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d00e      	beq.n	80013a6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001390:	2b08      	cmp	r3, #8
 8001392:	d114      	bne.n	80013be <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001394:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	23c0      	movs	r3, #192	; 0xc0
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	401a      	ands	r2, r3
 800139e:	23c0      	movs	r3, #192	; 0xc0
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10b      	bne.n	80013be <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80013a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	029b      	lsls	r3, r3, #10
 80013ae:	4013      	ands	r3, r2
 80013b0:	d040      	beq.n	8001434 <HAL_RCC_OscConfig+0x5a8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d03c      	beq.n	8001434 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0e6      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01b      	beq.n	80013fe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013c6:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0249      	lsls	r1, r1, #9
 80013d0:	430a      	orrs	r2, r1
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fab8 	bl	8000948 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013de:	f7ff fab3 	bl	8000948 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0cd      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013f0:	4b45      	ldr	r3, [pc, #276]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x552>
 80013fc:	e01b      	b.n	8001436 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001404:	4943      	ldr	r1, [pc, #268]	; (8001514 <HAL_RCC_OscConfig+0x688>)
 8001406:	400a      	ands	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fa9d 	bl	8000948 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001414:	f7ff fa98 	bl	8000948 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0b2      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x588>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001434:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	2b00      	cmp	r3, #0
 800143c:	d100      	bne.n	8001440 <HAL_RCC_OscConfig+0x5b4>
 800143e:	e0a4      	b.n	800158a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b08      	cmp	r3, #8
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x5c2>
 800144c:	e078      	b.n	8001540 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	2b02      	cmp	r3, #2
 8001454:	d14c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800145c:	492e      	ldr	r1, [pc, #184]	; (8001518 <HAL_RCC_OscConfig+0x68c>)
 800145e:	400a      	ands	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fa71 	bl	8000948 <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fa6c 	bl	8000948 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e086      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	049b      	lsls	r3, r3, #18
 8001486:	4013      	ands	r3, r2
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	220f      	movs	r2, #15
 8001490:	4393      	bics	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 800149a:	430a      	orrs	r2, r1
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_RCC_OscConfig+0x690>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	431a      	orrs	r2, r3
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0449      	lsls	r1, r1, #17
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa3f 	bl	8000948 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fa3a 	bl	8000948 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e054      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	049b      	lsls	r3, r3, #18
 80014ea:	4013      	ands	r3, r2
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x644>
 80014ee:	e04c      	b.n	800158a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <HAL_RCC_OscConfig+0x68c>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa24 	bl	8000948 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x6a6>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	00001388 	.word	0x00001388
 8001510:	efffffff 	.word	0xefffffff
 8001514:	fffeffff 	.word	0xfffeffff
 8001518:	feffffff 	.word	0xfeffffff
 800151c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fa12 	bl	8000948 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e02c      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	049b      	lsls	r3, r3, #18
 800153a:	4013      	ands	r3, r2
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x694>
 800153e:	e024      	b.n	800158a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e01f      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	23c0      	movs	r3, #192	; 0xc0
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	429a      	cmp	r2, r3
 8001566:	d10e      	bne.n	8001586 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	220f      	movs	r2, #15
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	23f0      	movs	r3, #240	; 0xf0
 800157a:	039b      	lsls	r3, r3, #14
 800157c:	401a      	ands	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b008      	add	sp, #32
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0bf      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d911      	bls.n	80015de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0a6      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2204      	movs	r2, #4
 80015ee:	4013      	ands	r3, r2
 80015f0:	d006      	beq.n	8001600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 80015f8:	21e0      	movs	r1, #224	; 0xe0
 80015fa:	00c9      	lsls	r1, r1, #3
 80015fc:	430a      	orrs	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	22f0      	movs	r2, #240	; 0xf0
 8001606:	4393      	bics	r3, r2
 8001608:	0019      	movs	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	d04c      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d120      	bne.n	8001674 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07a      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	049b      	lsls	r3, r3, #18
 8001646:	4013      	ands	r3, r2
 8001648:	d114      	bne.n	8001674 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06e      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	4013      	ands	r3, r2
 8001660:	d108      	bne.n	8001674 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e062      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e05b      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2203      	movs	r2, #3
 800167a:	4393      	bics	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff f95e 	bl	8000948 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001690:	e009      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001692:	f7ff f959 	bl	8000948 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <HAL_RCC_ClockConfig+0x1a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e042      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	220c      	movs	r2, #12
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1ec      	bne.n	8001692 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d211      	bcs.n	80016ea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4393      	bics	r3, r2
 80016ce:	0019      	movs	r1, r3
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x19c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e020      	b.n	800172c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d009      	beq.n	8001708 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_RCC_ClockConfig+0x1a8>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	0019      	movs	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001708:	f000 f820 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800170c:	0001      	movs	r1, r0
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1a0>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	220f      	movs	r2, #15
 8001716:	4013      	ands	r3, r2
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_RCC_ClockConfig+0x1ac>)
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	000a      	movs	r2, r1
 800171e:	40da      	lsrs	r2, r3
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1b0>)
 8001722:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff f8c9 	bl	80008bc <HAL_InitTick>
  
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40022000 	.word	0x40022000
 8001738:	40021000 	.word	0x40021000
 800173c:	00001388 	.word	0x00001388
 8001740:	fffff8ff 	.word	0xfffff8ff
 8001744:	08002e38 	.word	0x08002e38
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	220c      	movs	r2, #12
 8001770:	4013      	ands	r3, r2
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d046      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0xb8>
 8001776:	d848      	bhi.n	800180a <HAL_RCC_GetSysClockFreq+0xbe>
 8001778:	2b04      	cmp	r3, #4
 800177a:	d002      	beq.n	8001782 <HAL_RCC_GetSysClockFreq+0x36>
 800177c:	2b08      	cmp	r3, #8
 800177e:	d003      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x3c>
 8001780:	e043      	b.n	800180a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001784:	613b      	str	r3, [r7, #16]
      break;
 8001786:	e043      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	220f      	movs	r2, #15
 800178e:	4013      	ands	r3, r2
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	220f      	movs	r2, #15
 800179c:	4013      	ands	r3, r2
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_RCC_GetSysClockFreq+0xdc>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	23c0      	movs	r3, #192	; 0xc0
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	401a      	ands	r2, r3
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d109      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	481a      	ldr	r0, [pc, #104]	; (8001820 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017b8:	f7fe fca6 	bl	8000108 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	001a      	movs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4353      	muls	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e01a      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	23c0      	movs	r3, #192	; 0xc0
 80017cc:	025b      	lsls	r3, r3, #9
 80017ce:	401a      	ands	r2, r3
 80017d0:	23c0      	movs	r3, #192	; 0xc0
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d109      	bne.n	80017ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	4814      	ldr	r0, [pc, #80]	; (800182c <HAL_RCC_GetSysClockFreq+0xe0>)
 80017dc:	f7fe fc94 	bl	8000108 <__udivsi3>
 80017e0:	0003      	movs	r3, r0
 80017e2:	001a      	movs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4353      	muls	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e008      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017f0:	f7fe fc8a 	bl	8000108 <__udivsi3>
 80017f4:	0003      	movs	r3, r0
 80017f6:	001a      	movs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4353      	muls	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	613b      	str	r3, [r7, #16]
      break;
 8001802:	e005      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001806:	613b      	str	r3, [r7, #16]
      break;
 8001808:	e002      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetSysClockFreq+0xd4>)
 800180c:	613b      	str	r3, [r7, #16]
      break;
 800180e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001810:	693b      	ldr	r3, [r7, #16]
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b006      	add	sp, #24
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40021000 	.word	0x40021000
 8001820:	007a1200 	.word	0x007a1200
 8001824:	08002e50 	.word	0x08002e50
 8001828:	08002e60 	.word	0x08002e60
 800182c:	02dc6c00 	.word	0x02dc6c00

08001830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_RCC_GetHCLKFreq+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001848:	f7ff fff2 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 800184c:	0001      	movs	r1, r0
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	2207      	movs	r2, #7
 8001856:	4013      	ands	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_RCC_GetPCLK1Freq+0x28>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	40d9      	lsrs	r1, r3
 800185e:	000b      	movs	r3, r1
}    
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40021000 	.word	0x40021000
 800186c:	08002e48 	.word	0x08002e48

08001870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	025b      	lsls	r3, r3, #9
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800188c:	e08e      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2017      	movs	r0, #23
 8001890:	183b      	adds	r3, r7, r0
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b6e      	ldr	r3, [pc, #440]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	055b      	lsls	r3, r3, #21
 800189e:	4013      	ands	r3, r2
 80018a0:	d110      	bne.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b6b      	ldr	r3, [pc, #428]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0549      	lsls	r1, r1, #21
 80018ac:	430a      	orrs	r2, r1
 80018ae:	61da      	str	r2, [r3, #28]
 80018b0:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018b2:	69da      	ldr	r2, [r3, #28]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	055b      	lsls	r3, r3, #21
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d11a      	bne.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	0049      	lsls	r1, r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff f833 	bl	8000948 <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	e008      	b.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e8:	f7ff f82e 	bl	8000948 <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0a6      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001906:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	23c0      	movs	r3, #192	; 0xc0
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4013      	ands	r3, r2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d02c      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a4a      	ldr	r2, [pc, #296]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0249      	lsls	r1, r1, #9
 800193c:	430a      	orrs	r2, r1
 800193e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001942:	6a1a      	ldr	r2, [r3, #32]
 8001944:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001946:	4945      	ldr	r1, [pc, #276]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001948:	400a      	ands	r2, r1
 800194a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7fe fff5 	bl	8000948 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001962:	e009      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7fe fff0 	bl	8000948 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e067      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d0f0      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001992:	430a      	orrs	r2, r1
 8001994:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001996:	2317      	movs	r3, #23
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a6:	492f      	ldr	r1, [pc, #188]	; (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	2203      	movs	r2, #3
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2220      	movs	r2, #32
 80019ee:	4013      	ands	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	2210      	movs	r2, #16
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	029b      	lsls	r3, r3, #10
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	4393      	bics	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	fffffcff 	.word	0xfffffcff
 8001a5c:	fffeffff 	.word	0xfffeffff
 8001a60:	00001388 	.word	0x00001388
 8001a64:	efffffff 	.word	0xefffffff
 8001a68:	fffcffff 	.word	0xfffcffff

08001a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e042      	b.n	8001b04 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	223d      	movs	r2, #61	; 0x3d
 8001a82:	5c9b      	ldrb	r3, [r3, r2]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d107      	bne.n	8001a9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	223c      	movs	r2, #60	; 0x3c
 8001a8e:	2100      	movs	r1, #0
 8001a90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe fdcb 	bl	8000630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223d      	movs	r2, #61	; 0x3d
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	0019      	movs	r1, r3
 8001aac:	0010      	movs	r0, r2
 8001aae:	f000 fac1 	bl	8002034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2246      	movs	r2, #70	; 0x46
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	223e      	movs	r2, #62	; 0x3e
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	223f      	movs	r2, #63	; 0x3f
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2241      	movs	r2, #65	; 0x41
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2242      	movs	r2, #66	; 0x42
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2243      	movs	r2, #67	; 0x43
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2244      	movs	r2, #68	; 0x44
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2245      	movs	r2, #69	; 0x45
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	223d      	movs	r2, #61	; 0x3d
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d108      	bne.n	8001b2e <HAL_TIM_PWM_Start+0x22>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	223e      	movs	r2, #62	; 0x3e
 8001b20:	5c9b      	ldrb	r3, [r3, r2]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	4193      	sbcs	r3, r2
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	e01f      	b.n	8001b6e <HAL_TIM_PWM_Start+0x62>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d108      	bne.n	8001b46 <HAL_TIM_PWM_Start+0x3a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	223f      	movs	r2, #63	; 0x3f
 8001b38:	5c9b      	ldrb	r3, [r3, r2]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	4193      	sbcs	r3, r2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e013      	b.n	8001b6e <HAL_TIM_PWM_Start+0x62>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d108      	bne.n	8001b5e <HAL_TIM_PWM_Start+0x52>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	5c9b      	ldrb	r3, [r3, r2]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	4193      	sbcs	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	e007      	b.n	8001b6e <HAL_TIM_PWM_Start+0x62>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2241      	movs	r2, #65	; 0x41
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	4193      	sbcs	r3, r2
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e074      	b.n	8001c60 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <HAL_TIM_PWM_Start+0x7a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	223e      	movs	r2, #62	; 0x3e
 8001b80:	2102      	movs	r1, #2
 8001b82:	5499      	strb	r1, [r3, r2]
 8001b84:	e013      	b.n	8001bae <HAL_TIM_PWM_Start+0xa2>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d104      	bne.n	8001b96 <HAL_TIM_PWM_Start+0x8a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	223f      	movs	r2, #63	; 0x3f
 8001b90:	2102      	movs	r1, #2
 8001b92:	5499      	strb	r1, [r3, r2]
 8001b94:	e00b      	b.n	8001bae <HAL_TIM_PWM_Start+0xa2>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d104      	bne.n	8001ba6 <HAL_TIM_PWM_Start+0x9a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	5499      	strb	r1, [r3, r2]
 8001ba4:	e003      	b.n	8001bae <HAL_TIM_PWM_Start+0xa2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	; 0x41
 8001baa:	2102      	movs	r1, #2
 8001bac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 fcc6 	bl	8002548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <HAL_TIM_PWM_Start+0x15c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_TIM_PWM_Start+0xd8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <HAL_TIM_PWM_Start+0x160>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_TIM_PWM_Start+0xd8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_TIM_PWM_Start+0x164>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_TIM_PWM_Start+0xd8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_TIM_PWM_Start+0x168>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_TIM_PWM_Start+0xdc>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_TIM_PWM_Start+0xde>
 8001be8:	2300      	movs	r3, #0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0209      	lsls	r1, r1, #8
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_TIM_PWM_Start+0x15c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00f      	beq.n	8001c2a <HAL_TIM_PWM_Start+0x11e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d009      	beq.n	8001c2a <HAL_TIM_PWM_Start+0x11e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_TIM_PWM_Start+0x16c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d004      	beq.n	8001c2a <HAL_TIM_PWM_Start+0x11e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_TIM_PWM_Start+0x160>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d111      	bne.n	8001c4e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2207      	movs	r2, #7
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b06      	cmp	r3, #6
 8001c3a:	d010      	beq.n	8001c5e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2101      	movs	r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4c:	e007      	b.n	8001c5e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40014000 	.word	0x40014000
 8001c70:	40014400 	.word	0x40014400
 8001c74:	40014800 	.word	0x40014800
 8001c78:	40000400 	.word	0x40000400

08001c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d021      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d01d      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4252      	negs	r2, r2
 8001cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 f99e 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e007      	b.n	8001cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f991 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f99d 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d01e      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	4252      	negs	r2, r2
 8001cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 f977 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 f96a 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 f976 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2208      	movs	r2, #8
 8001d32:	4013      	ands	r3, r2
 8001d34:	d021      	beq.n	8001d7a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2209      	movs	r2, #9
 8001d44:	4252      	negs	r2, r2
 8001d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2203      	movs	r2, #3
 8001d56:	4013      	ands	r3, r2
 8001d58:	d004      	beq.n	8001d64 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 f951 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001d62:	e007      	b.n	8001d74 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f000 f944 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f950 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2210      	movs	r2, #16
 8001d86:	4013      	ands	r3, r2
 8001d88:	d01e      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2211      	movs	r2, #17
 8001d90:	4252      	negs	r2, r2
 8001d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2208      	movs	r2, #8
 8001d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 f92a 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e007      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 f91d 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 f929 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d00c      	beq.n	8001dea <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d008      	beq.n	8001dea <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4252      	negs	r2, r2
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f8fd 	bl	8001fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	4013      	ands	r3, r2
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	4013      	ands	r3, r2
 8001df8:	d008      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2281      	movs	r2, #129	; 0x81
 8001e00:	4252      	negs	r2, r2
 8001e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 fbc9 	bl	800259e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	4013      	ands	r3, r2
 8001e12:	d00c      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d008      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2241      	movs	r2, #65	; 0x41
 8001e22:	4252      	negs	r2, r2
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 f8fb 	bl	8002024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2220      	movs	r2, #32
 8001e32:	4013      	ands	r3, r2
 8001e34:	d00c      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d008      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2221      	movs	r2, #33	; 0x21
 8001e44:	4252      	negs	r2, r2
 8001e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fb9f 	bl	800258e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2317      	movs	r3, #23
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	223c      	movs	r2, #60	; 0x3c
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0ad      	b.n	8001fd6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	223c      	movs	r2, #60	; 0x3c
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d100      	bne.n	8001e8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e88:	e076      	b.n	8001f78 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d900      	bls.n	8001e92 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001e90:	e095      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d04e      	beq.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d900      	bls.n	8001ea0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001e9e:	e08e      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_PWM_ConfigChannel+0x56>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d021      	beq.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001eac:	e087      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f94a 	bl	8002150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	438a      	bics	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6999      	ldr	r1, [r3, #24]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
      break;
 8001eee:	e06b      	b.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f9b1 	bl	8002260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0109      	lsls	r1, r1, #4
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4931      	ldr	r1, [pc, #196]	; (8001fe0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6999      	ldr	r1, [r3, #24]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]
      break;
 8001f34:	e048      	b.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fa12 	bl	8002368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2108      	movs	r1, #8
 8001f50:	430a      	orrs	r2, r1
 8001f52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2104      	movs	r1, #4
 8001f60:	438a      	bics	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69d9      	ldr	r1, [r3, #28]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	61da      	str	r2, [r3, #28]
      break;
 8001f76:	e027      	b.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fa77 	bl	8002474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0109      	lsls	r1, r1, #4
 8001f94:	430a      	orrs	r2, r1
 8001f96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	490f      	ldr	r1, [pc, #60]	; (8001fe0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69d9      	ldr	r1, [r3, #28]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	021a      	lsls	r2, r3, #8
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
      break;
 8001fbc:	e004      	b.n	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001fbe:	2317      	movs	r3, #23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
      break;
 8001fc6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	223c      	movs	r2, #60	; 0x3c
 8001fcc:	2100      	movs	r1, #0
 8001fce:	5499      	strb	r1, [r3, r2]

  return status;
 8001fd0:	2317      	movs	r3, #23
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b006      	add	sp, #24
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	fffffbff 	.word	0xfffffbff

08001fe4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <TIM_Base_SetConfig+0x100>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d008      	beq.n	800205e <TIM_Base_SetConfig+0x2a>
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	05db      	lsls	r3, r3, #23
 8002052:	429a      	cmp	r2, r3
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0x2a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a37      	ldr	r2, [pc, #220]	; (8002138 <TIM_Base_SetConfig+0x104>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2270      	movs	r2, #112	; 0x70
 8002062:	4393      	bics	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a30      	ldr	r2, [pc, #192]	; (8002134 <TIM_Base_SetConfig+0x100>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d018      	beq.n	80020aa <TIM_Base_SetConfig+0x76>
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	05db      	lsls	r3, r3, #23
 800207e:	429a      	cmp	r2, r3
 8002080:	d013      	beq.n	80020aa <TIM_Base_SetConfig+0x76>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <TIM_Base_SetConfig+0x104>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00f      	beq.n	80020aa <TIM_Base_SetConfig+0x76>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <TIM_Base_SetConfig+0x108>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00b      	beq.n	80020aa <TIM_Base_SetConfig+0x76>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <TIM_Base_SetConfig+0x10c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <TIM_Base_SetConfig+0x76>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a29      	ldr	r2, [pc, #164]	; (8002144 <TIM_Base_SetConfig+0x110>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_Base_SetConfig+0x76>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <TIM_Base_SetConfig+0x114>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d108      	bne.n	80020bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <TIM_Base_SetConfig+0x118>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	4393      	bics	r3, r2
 80020c2:	001a      	movs	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a13      	ldr	r2, [pc, #76]	; (8002134 <TIM_Base_SetConfig+0x100>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00b      	beq.n	8002102 <TIM_Base_SetConfig+0xce>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <TIM_Base_SetConfig+0x10c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <TIM_Base_SetConfig+0xce>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <TIM_Base_SetConfig+0x110>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d003      	beq.n	8002102 <TIM_Base_SetConfig+0xce>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <TIM_Base_SetConfig+0x114>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d103      	bne.n	800210a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2201      	movs	r2, #1
 8002122:	4393      	bics	r3, r2
 8002124:	001a      	movs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  }
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40000400 	.word	0x40000400
 800213c:	40002000 	.word	0x40002000
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	fffffcff 	.word	0xfffffcff

08002150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	2201      	movs	r2, #1
 8002166:	4393      	bics	r3, r2
 8002168:	001a      	movs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2270      	movs	r2, #112	; 0x70
 800217e:	4393      	bics	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2203      	movs	r2, #3
 8002186:	4393      	bics	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2202      	movs	r2, #2
 8002198:	4393      	bics	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a27      	ldr	r2, [pc, #156]	; (8002248 <TIM_OC1_SetConfig+0xf8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00b      	beq.n	80021c6 <TIM_OC1_SetConfig+0x76>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a26      	ldr	r2, [pc, #152]	; (800224c <TIM_OC1_SetConfig+0xfc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <TIM_OC1_SetConfig+0x76>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <TIM_OC1_SetConfig+0x100>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d003      	beq.n	80021c6 <TIM_OC1_SetConfig+0x76>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a24      	ldr	r2, [pc, #144]	; (8002254 <TIM_OC1_SetConfig+0x104>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10c      	bne.n	80021e0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2208      	movs	r2, #8
 80021ca:	4393      	bics	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2204      	movs	r2, #4
 80021dc:	4393      	bics	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a19      	ldr	r2, [pc, #100]	; (8002248 <TIM_OC1_SetConfig+0xf8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00b      	beq.n	8002200 <TIM_OC1_SetConfig+0xb0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <TIM_OC1_SetConfig+0xfc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <TIM_OC1_SetConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <TIM_OC1_SetConfig+0x100>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_OC1_SetConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <TIM_OC1_SetConfig+0x104>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <TIM_OC1_SetConfig+0x108>)
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <TIM_OC1_SetConfig+0x10c>)
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40014000 	.word	0x40014000
 8002250:	40014400 	.word	0x40014400
 8002254:	40014800 	.word	0x40014800
 8002258:	fffffeff 	.word	0xfffffeff
 800225c:	fffffdff 	.word	0xfffffdff

08002260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	2210      	movs	r2, #16
 8002276:	4393      	bics	r3, r2
 8002278:	001a      	movs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <TIM_OC2_SetConfig+0xe8>)
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <TIM_OC2_SetConfig+0xec>)
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2220      	movs	r2, #32
 80022aa:	4393      	bics	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <TIM_OC2_SetConfig+0xf0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10d      	bne.n	80022de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	4393      	bics	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	4393      	bics	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <TIM_OC2_SetConfig+0xf0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00b      	beq.n	80022fe <TIM_OC2_SetConfig+0x9e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <TIM_OC2_SetConfig+0xf4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <TIM_OC2_SetConfig+0x9e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <TIM_OC2_SetConfig+0xf8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d003      	beq.n	80022fe <TIM_OC2_SetConfig+0x9e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <TIM_OC2_SetConfig+0xfc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d113      	bne.n	8002326 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <TIM_OC2_SetConfig+0x100>)
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4a16      	ldr	r2, [pc, #88]	; (8002364 <TIM_OC2_SetConfig+0x104>)
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	621a      	str	r2, [r3, #32]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b006      	add	sp, #24
 8002346:	bd80      	pop	{r7, pc}
 8002348:	ffff8fff 	.word	0xffff8fff
 800234c:	fffffcff 	.word	0xfffffcff
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40014000 	.word	0x40014000
 8002358:	40014400 	.word	0x40014400
 800235c:	40014800 	.word	0x40014800
 8002360:	fffffbff 	.word	0xfffffbff
 8002364:	fffff7ff 	.word	0xfffff7ff

08002368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a33      	ldr	r2, [pc, #204]	; (800244c <TIM_OC3_SetConfig+0xe4>)
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2270      	movs	r2, #112	; 0x70
 8002394:	4393      	bics	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2203      	movs	r2, #3
 800239c:	4393      	bics	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a28      	ldr	r2, [pc, #160]	; (8002450 <TIM_OC3_SetConfig+0xe8>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <TIM_OC3_SetConfig+0xec>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10d      	bne.n	80023e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <TIM_OC3_SetConfig+0xf0>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4a1f      	ldr	r2, [pc, #124]	; (800245c <TIM_OC3_SetConfig+0xf4>)
 80023de:	4013      	ands	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <TIM_OC3_SetConfig+0xec>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00b      	beq.n	8002402 <TIM_OC3_SetConfig+0x9a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <TIM_OC3_SetConfig+0xf8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <TIM_OC3_SetConfig+0x9a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <TIM_OC3_SetConfig+0xfc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d003      	beq.n	8002402 <TIM_OC3_SetConfig+0x9a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <TIM_OC3_SetConfig+0x100>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d113      	bne.n	800242a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <TIM_OC3_SetConfig+0x104>)
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <TIM_OC3_SetConfig+0x108>)
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	621a      	str	r2, [r3, #32]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	fffffdff 	.word	0xfffffdff
 8002454:	40012c00 	.word	0x40012c00
 8002458:	fffff7ff 	.word	0xfffff7ff
 800245c:	fffffbff 	.word	0xfffffbff
 8002460:	40014000 	.word	0x40014000
 8002464:	40014400 	.word	0x40014400
 8002468:	40014800 	.word	0x40014800
 800246c:	ffffefff 	.word	0xffffefff
 8002470:	ffffdfff 	.word	0xffffdfff

08002474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <TIM_OC4_SetConfig+0xb0>)
 800248a:	401a      	ands	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <TIM_OC4_SetConfig+0xb4>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a21      	ldr	r2, [pc, #132]	; (800252c <TIM_OC4_SetConfig+0xb8>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <TIM_OC4_SetConfig+0xbc>)
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	031b      	lsls	r3, r3, #12
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <TIM_OC4_SetConfig+0xc0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00b      	beq.n	80024ec <TIM_OC4_SetConfig+0x78>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <TIM_OC4_SetConfig+0xc4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <TIM_OC4_SetConfig+0x78>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <TIM_OC4_SetConfig+0xc8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_OC4_SetConfig+0x78>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a16      	ldr	r2, [pc, #88]	; (8002540 <TIM_OC4_SetConfig+0xcc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d109      	bne.n	8002500 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <TIM_OC4_SetConfig+0xd0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	621a      	str	r2, [r3, #32]
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b006      	add	sp, #24
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	ffffefff 	.word	0xffffefff
 8002528:	ffff8fff 	.word	0xffff8fff
 800252c:	fffffcff 	.word	0xfffffcff
 8002530:	ffffdfff 	.word	0xffffdfff
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40014000 	.word	0x40014000
 800253c:	40014400 	.word	0x40014400
 8002540:	40014800 	.word	0x40014800
 8002544:	ffffbfff 	.word	0xffffbfff

08002548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	221f      	movs	r2, #31
 8002558:	4013      	ands	r3, r2
 800255a:	2201      	movs	r2, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	0013      	movs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	43d2      	mvns	r2, r2
 800256a:	401a      	ands	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1a      	ldr	r2, [r3, #32]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	211f      	movs	r1, #31
 8002578:	400b      	ands	r3, r1
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4099      	lsls	r1, r3
 800257e:	000b      	movs	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b006      	add	sp, #24
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e044      	b.n	800264c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2278      	movs	r2, #120	; 0x78
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fe f8bd 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2224      	movs	r2, #36	; 0x24
 80025de:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f9b4 	bl	8002968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0018      	movs	r0, r3
 8002604:	f000 f828 	bl	8002658 <UART_SetConfig>
 8002608:	0003      	movs	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e01c      	b.n	800264c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	490d      	ldr	r1, [pc, #52]	; (8002654 <HAL_UART_Init+0xa4>)
 800261e:	400a      	ands	r2, r1
 8002620:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	212a      	movs	r1, #42	; 0x2a
 800262e:	438a      	bics	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fa43 	bl	8002ad0 <UART_CheckIdleState>
 800264a:	0003      	movs	r3, r0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b002      	add	sp, #8
 8002652:	bd80      	pop	{r7, pc}
 8002654:	ffffb7ff 	.word	0xffffb7ff

08002658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002660:	231e      	movs	r3, #30
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4aaf      	ldr	r2, [pc, #700]	; (8002944 <UART_SetConfig+0x2ec>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4aaa      	ldr	r2, [pc, #680]	; (8002948 <UART_SetConfig+0x2f0>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4aa1      	ldr	r2, [pc, #644]	; (800294c <UART_SetConfig+0x2f4>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a9d      	ldr	r2, [pc, #628]	; (8002950 <UART_SetConfig+0x2f8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d127      	bne.n	800272e <UART_SetConfig+0xd6>
 80026de:	4b9d      	ldr	r3, [pc, #628]	; (8002954 <UART_SetConfig+0x2fc>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	2203      	movs	r2, #3
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d00d      	beq.n	8002706 <UART_SetConfig+0xae>
 80026ea:	d81b      	bhi.n	8002724 <UART_SetConfig+0xcc>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d014      	beq.n	800271a <UART_SetConfig+0xc2>
 80026f0:	d818      	bhi.n	8002724 <UART_SetConfig+0xcc>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <UART_SetConfig+0xa4>
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d00a      	beq.n	8002710 <UART_SetConfig+0xb8>
 80026fa:	e013      	b.n	8002724 <UART_SetConfig+0xcc>
 80026fc:	231f      	movs	r3, #31
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e065      	b.n	80027d2 <UART_SetConfig+0x17a>
 8002706:	231f      	movs	r3, #31
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e060      	b.n	80027d2 <UART_SetConfig+0x17a>
 8002710:	231f      	movs	r3, #31
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2204      	movs	r2, #4
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e05b      	b.n	80027d2 <UART_SetConfig+0x17a>
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2208      	movs	r2, #8
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e056      	b.n	80027d2 <UART_SetConfig+0x17a>
 8002724:	231f      	movs	r3, #31
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2210      	movs	r2, #16
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e051      	b.n	80027d2 <UART_SetConfig+0x17a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a89      	ldr	r2, [pc, #548]	; (8002958 <UART_SetConfig+0x300>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d134      	bne.n	80027a2 <UART_SetConfig+0x14a>
 8002738:	4b86      	ldr	r3, [pc, #536]	; (8002954 <UART_SetConfig+0x2fc>)
 800273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	4013      	ands	r3, r2
 8002742:	22c0      	movs	r2, #192	; 0xc0
 8002744:	0292      	lsls	r2, r2, #10
 8002746:	4293      	cmp	r3, r2
 8002748:	d017      	beq.n	800277a <UART_SetConfig+0x122>
 800274a:	22c0      	movs	r2, #192	; 0xc0
 800274c:	0292      	lsls	r2, r2, #10
 800274e:	4293      	cmp	r3, r2
 8002750:	d822      	bhi.n	8002798 <UART_SetConfig+0x140>
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	0292      	lsls	r2, r2, #10
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <UART_SetConfig+0x136>
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	0292      	lsls	r2, r2, #10
 800275e:	4293      	cmp	r3, r2
 8002760:	d81a      	bhi.n	8002798 <UART_SetConfig+0x140>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <UART_SetConfig+0x118>
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	0252      	lsls	r2, r2, #9
 800276a:	4293      	cmp	r3, r2
 800276c:	d00a      	beq.n	8002784 <UART_SetConfig+0x12c>
 800276e:	e013      	b.n	8002798 <UART_SetConfig+0x140>
 8002770:	231f      	movs	r3, #31
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e02b      	b.n	80027d2 <UART_SetConfig+0x17a>
 800277a:	231f      	movs	r3, #31
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e026      	b.n	80027d2 <UART_SetConfig+0x17a>
 8002784:	231f      	movs	r3, #31
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2204      	movs	r2, #4
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e021      	b.n	80027d2 <UART_SetConfig+0x17a>
 800278e:	231f      	movs	r3, #31
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2208      	movs	r2, #8
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e01c      	b.n	80027d2 <UART_SetConfig+0x17a>
 8002798:	231f      	movs	r3, #31
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2210      	movs	r2, #16
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e017      	b.n	80027d2 <UART_SetConfig+0x17a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6d      	ldr	r2, [pc, #436]	; (800295c <UART_SetConfig+0x304>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d104      	bne.n	80027b6 <UART_SetConfig+0x15e>
 80027ac:	231f      	movs	r3, #31
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e00d      	b.n	80027d2 <UART_SetConfig+0x17a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a69      	ldr	r2, [pc, #420]	; (8002960 <UART_SetConfig+0x308>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d104      	bne.n	80027ca <UART_SetConfig+0x172>
 80027c0:	231f      	movs	r3, #31
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e003      	b.n	80027d2 <UART_SetConfig+0x17a>
 80027ca:	231f      	movs	r3, #31
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2210      	movs	r2, #16
 80027d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	429a      	cmp	r2, r3
 80027dc:	d15c      	bne.n	8002898 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80027de:	231f      	movs	r3, #31
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d015      	beq.n	8002814 <UART_SetConfig+0x1bc>
 80027e8:	dc18      	bgt.n	800281c <UART_SetConfig+0x1c4>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d00d      	beq.n	800280a <UART_SetConfig+0x1b2>
 80027ee:	dc15      	bgt.n	800281c <UART_SetConfig+0x1c4>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <UART_SetConfig+0x1a2>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d005      	beq.n	8002804 <UART_SetConfig+0x1ac>
 80027f8:	e010      	b.n	800281c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027fa:	f7ff f823 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 80027fe:	0003      	movs	r3, r0
 8002800:	61bb      	str	r3, [r7, #24]
        break;
 8002802:	e012      	b.n	800282a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002804:	4b57      	ldr	r3, [pc, #348]	; (8002964 <UART_SetConfig+0x30c>)
 8002806:	61bb      	str	r3, [r7, #24]
        break;
 8002808:	e00f      	b.n	800282a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280a:	f7fe ff9f 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800280e:	0003      	movs	r3, r0
 8002810:	61bb      	str	r3, [r7, #24]
        break;
 8002812:	e00a      	b.n	800282a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	61bb      	str	r3, [r7, #24]
        break;
 800281a:	e006      	b.n	800282a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002820:	231e      	movs	r3, #30
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
        break;
 8002828:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d100      	bne.n	8002832 <UART_SetConfig+0x1da>
 8002830:	e07a      	b.n	8002928 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	18d2      	adds	r2, r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0019      	movs	r1, r3
 8002844:	0010      	movs	r0, r2
 8002846:	f7fd fc5f 	bl	8000108 <__udivsi3>
 800284a:	0003      	movs	r3, r0
 800284c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d91c      	bls.n	800288e <UART_SetConfig+0x236>
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	025b      	lsls	r3, r3, #9
 800285a:	429a      	cmp	r2, r3
 800285c:	d217      	bcs.n	800288e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	b29a      	uxth	r2, r3
 8002862:	200e      	movs	r0, #14
 8002864:	183b      	adds	r3, r7, r0
 8002866:	210f      	movs	r1, #15
 8002868:	438a      	bics	r2, r1
 800286a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	2207      	movs	r2, #7
 8002874:	4013      	ands	r3, r2
 8002876:	b299      	uxth	r1, r3
 8002878:	183b      	adds	r3, r7, r0
 800287a:	183a      	adds	r2, r7, r0
 800287c:	8812      	ldrh	r2, [r2, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	183a      	adds	r2, r7, r0
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	e04c      	b.n	8002928 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800288e:	231e      	movs	r3, #30
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e047      	b.n	8002928 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002898:	231f      	movs	r3, #31
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d015      	beq.n	80028ce <UART_SetConfig+0x276>
 80028a2:	dc18      	bgt.n	80028d6 <UART_SetConfig+0x27e>
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00d      	beq.n	80028c4 <UART_SetConfig+0x26c>
 80028a8:	dc15      	bgt.n	80028d6 <UART_SetConfig+0x27e>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <UART_SetConfig+0x25c>
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d005      	beq.n	80028be <UART_SetConfig+0x266>
 80028b2:	e010      	b.n	80028d6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b4:	f7fe ffc6 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 80028b8:	0003      	movs	r3, r0
 80028ba:	61bb      	str	r3, [r7, #24]
        break;
 80028bc:	e012      	b.n	80028e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <UART_SetConfig+0x30c>)
 80028c0:	61bb      	str	r3, [r7, #24]
        break;
 80028c2:	e00f      	b.n	80028e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c4:	f7fe ff42 	bl	800174c <HAL_RCC_GetSysClockFreq>
 80028c8:	0003      	movs	r3, r0
 80028ca:	61bb      	str	r3, [r7, #24]
        break;
 80028cc:	e00a      	b.n	80028e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	61bb      	str	r3, [r7, #24]
        break;
 80028d4:	e006      	b.n	80028e4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028da:	231e      	movs	r3, #30
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
        break;
 80028e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01e      	beq.n	8002928 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	085a      	lsrs	r2, r3, #1
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	18d2      	adds	r2, r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0019      	movs	r1, r3
 80028fa:	0010      	movs	r0, r2
 80028fc:	f7fd fc04 	bl	8000108 <__udivsi3>
 8002900:	0003      	movs	r3, r0
 8002902:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	d90a      	bls.n	8002920 <UART_SetConfig+0x2c8>
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	429a      	cmp	r2, r3
 8002912:	d205      	bcs.n	8002920 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e003      	b.n	8002928 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002920:	231e      	movs	r3, #30
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002934:	231e      	movs	r3, #30
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b008      	add	sp, #32
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	efff69f3 	.word	0xefff69f3
 8002948:	ffffcfff 	.word	0xffffcfff
 800294c:	fffff4ff 	.word	0xfffff4ff
 8002950:	40013800 	.word	0x40013800
 8002954:	40021000 	.word	0x40021000
 8002958:	40004400 	.word	0x40004400
 800295c:	40004800 	.word	0x40004800
 8002960:	40004c00 	.word	0x40004c00
 8002964:	007a1200 	.word	0x007a1200

08002968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2208      	movs	r2, #8
 8002976:	4013      	ands	r3, r2
 8002978:	d00b      	beq.n	8002992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <UART_AdvFeatureConfig+0x144>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	d00b      	beq.n	80029b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <UART_AdvFeatureConfig+0x148>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <UART_AdvFeatureConfig+0x14c>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2204      	movs	r2, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	d00b      	beq.n	80029f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <UART_AdvFeatureConfig+0x150>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2210      	movs	r2, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <UART_AdvFeatureConfig+0x154>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <UART_AdvFeatureConfig+0x158>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	4013      	ands	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <UART_AdvFeatureConfig+0x15c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	035b      	lsls	r3, r3, #13
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10b      	bne.n	8002a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <UART_AdvFeatureConfig+0x160>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d00b      	beq.n	8002aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <UART_AdvFeatureConfig+0x164>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffff7fff 	.word	0xffff7fff
 8002ab0:	fffdffff 	.word	0xfffdffff
 8002ab4:	fffeffff 	.word	0xfffeffff
 8002ab8:	fffbffff 	.word	0xfffbffff
 8002abc:	ffffefff 	.word	0xffffefff
 8002ac0:	ffffdfff 	.word	0xffffdfff
 8002ac4:	ffefffff 	.word	0xffefffff
 8002ac8:	ff9fffff 	.word	0xff9fffff
 8002acc:	fff7ffff 	.word	0xfff7ffff

08002ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b092      	sub	sp, #72	; 0x48
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2284      	movs	r2, #132	; 0x84
 8002adc:	2100      	movs	r1, #0
 8002ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ae0:	f7fd ff32 	bl	8000948 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2208      	movs	r2, #8
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d12c      	bne.n	8002b50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	0391      	lsls	r1, r2, #14
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <UART_CheckIdleState+0x148>)
 8002b00:	9200      	str	r2, [sp, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f000 f88c 	bl	8002c20 <UART_WaitOnFlagUntilTimeout>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d021      	beq.n	8002b50 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b16:	2301      	movs	r3, #1
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	438a      	bics	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2278      	movs	r2, #120	; 0x78
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e05f      	b.n	8002c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2204      	movs	r2, #4
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d146      	bne.n	8002bec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	03d1      	lsls	r1, r2, #15
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <UART_CheckIdleState+0x148>)
 8002b68:	9200      	str	r2, [sp, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f000 f858 	bl	8002c20 <UART_WaitOnFlagUntilTimeout>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d03b      	beq.n	8002bec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b74:	f3ef 8310 	mrs	r3, PRIMASK
 8002b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	2301      	movs	r3, #1
 8002b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4921      	ldr	r1, [pc, #132]	; (8002c1c <UART_CheckIdleState+0x14c>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8002baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	438a      	bics	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f383 8810 	msr	PRIMASK, r3
}
 8002bd6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	2120      	movs	r1, #32
 8002bde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2278      	movs	r2, #120	; 0x78
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e011      	b.n	8002c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2278      	movs	r2, #120	; 0x78
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b010      	add	sp, #64	; 0x40
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	01ffffff 	.word	0x01ffffff
 8002c1c:	fffffedf 	.word	0xfffffedf

08002c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c30:	e051      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	3301      	adds	r3, #1
 8002c36:	d04e      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fd fe86 	bl	8000948 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e051      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d03b      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d038      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d035      	beq.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2208      	movs	r2, #8
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d111      	bne.n	8002c9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f83c 	bl	8002d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2284      	movs	r2, #132	; 0x84
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2278      	movs	r2, #120	; 0x78
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e02c      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d112      	bne.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 f81f 	bl	8002d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2284      	movs	r2, #132	; 0x84
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2278      	movs	r2, #120	; 0x78
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e00f      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	425a      	negs	r2, r3
 8002ce6:	4153      	adcs	r3, r2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	001a      	movs	r2, r3
 8002cec:	1dfb      	adds	r3, r7, #7
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d09e      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d08:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f383 8810 	msr	PRIMASK, r3
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4926      	ldr	r1, [pc, #152]	; (8002dc4 <UART_EndRxTransfer+0xc4>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f383 8810 	msr	PRIMASK, r3
}
 8002d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
 8002d44:	2301      	movs	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f383 8810 	msr	PRIMASK, r3
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f383 8810 	msr	PRIMASK, r3
}
 8002d6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d118      	bne.n	8002da6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d74:	f3ef 8310 	mrs	r3, PRIMASK
 8002d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	2301      	movs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f383 8810 	msr	PRIMASK, r3
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2110      	movs	r1, #16
 8002d96:	438a      	bics	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f383 8810 	msr	PRIMASK, r3
}
 8002da4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	2120      	movs	r1, #32
 8002dac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b00e      	add	sp, #56	; 0x38
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	fffffedf 	.word	0xfffffedf

08002dc8 <memset>:
 8002dc8:	0003      	movs	r3, r0
 8002dca:	1882      	adds	r2, r0, r2
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <memset+0xa>
 8002dd0:	4770      	bx	lr
 8002dd2:	7019      	strb	r1, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	e7f9      	b.n	8002dcc <memset+0x4>

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	2600      	movs	r6, #0
 8002ddc:	4c0c      	ldr	r4, [pc, #48]	; (8002e10 <__libc_init_array+0x38>)
 8002dde:	4d0d      	ldr	r5, [pc, #52]	; (8002e14 <__libc_init_array+0x3c>)
 8002de0:	1b64      	subs	r4, r4, r5
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	42a6      	cmp	r6, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	2600      	movs	r6, #0
 8002dea:	f000 f819 	bl	8002e20 <_init>
 8002dee:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <__libc_init_array+0x40>)
 8002df0:	4d0a      	ldr	r5, [pc, #40]	; (8002e1c <__libc_init_array+0x44>)
 8002df2:	1b64      	subs	r4, r4, r5
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	42a6      	cmp	r6, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	00b3      	lsls	r3, r6, #2
 8002dfe:	58eb      	ldr	r3, [r5, r3]
 8002e00:	4798      	blx	r3
 8002e02:	3601      	adds	r6, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	00b3      	lsls	r3, r6, #2
 8002e08:	58eb      	ldr	r3, [r5, r3]
 8002e0a:	4798      	blx	r3
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	08002e70 	.word	0x08002e70
 8002e14:	08002e70 	.word	0x08002e70
 8002e18:	08002e74 	.word	0x08002e74
 8002e1c:	08002e70 	.word	0x08002e70

08002e20 <_init>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr

08002e2c <_fini>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr
